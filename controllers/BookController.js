//controllers/BookController.js

const fs = require('fs');  //already in node.js
const path = require('path');  //already in node.js
const multer = require('multer');  //x upload file img on server(express)
const connection = require('../db/connection.js');

const pathImgCover = path.join(__dirname, '../public/imgcover');
const DB_NAMEDB = process.env.DB_NAMEDB;
console.log(`DB_NAMEDB is: ${DB_NAMEDB}`);

    //Set Multer x upload imgs to the express backend
const storage = multer.diskStorage({
    destination: (req,file,cb)=>{
        cb(null, pathImgCover);
    },
    filename : (req, file, cb)=>{
        const originalName = path.parse(file.originalname).name; 
        const randomNums = Date.now()%1e5 + Math.round(Math.random() * 1e5);
        const newFileName = `${originalName}_${randomNums}${path.extname(file.originalname)}`;
        cb(null, newFileName);
    }
});
const uploadImgCover = multer({storage : storage});


const indexBook = (req,res)=>{
    const query = `SELECT * FROM books`;
    connection.query(query, (err,results)=>{
        if(err) return res.status(500).json({error:err});
        return res.status(200).json({
            data : results,
            counter : results.length
        });
    });
};

const showBook = (req,res)=>{
    const bookId = Number(req.params.id);
    const query = `SELECT * FROM books WHERE id=?`;
    connection.query(query, [bookId],(err,results)=>{
        if(err) return res.status(500).json({error:err});
        if(results.length ===0 || !results[0]){  //is the same thing
            return res.status(404).json({error:'404 Not Found'});
        }
        return res.status(200).json({data:results[0]});
    });
}

const destroyBook = (req,res)=>{  //!with ON DELETE CASCADE in the sql setup, books reviews are automatically deleted when the book is deleted!
    const bookId = Number(req.params.id);
    const deleteBookQuery = `DELETE from books WHERE id=?`;

    connection.query(deleteBookQuery,[bookId],(err,bookResults)=>{
        if(err) return res.status(500).json({error:err});

        if(bookResults.affectedRows===0){
            return res.status(404).json({error:'404 Not Found'});
        }
        return res.status(200).json({
            message: `Book id ${bookId} deleted successfully`
        });
    });
}

const updateBook = (req,res)=>{
    const bookId = Number(req.params.id);
    const {title,author,genre,publication_year,description,cover_image} = req.body;
    const filePath = req.file ? `/imgcover/${req.file.filename}` : null;  
        //percorso file caricato tramite BookController.uploadImgCover.single('cover_image')
        //COALESCE retains the current value if the new value is null/undefined
    const query = `
        UPDATE books
        SET
            title = COALESCE(?, title),
            author = COALESCE(?, author),
            genre = COALESCE(?, genre),
            publication_year = COALESCE(?, publication_year),
            description = COALESCE(?, description),
            cover_image = COALESCE(?, cover_image)
        WHERE id = ?
    `;
    const params = [title,author,genre,publication_year,description,filePath ||cover_image, bookId];  //ADD ALSO THE BOOKID X "WHERE id= ?" !!
    connection.query(query,params,(err,result)=>{
        if(err) return res.status(500).json({error:err});
        if(result.affectedRows===0){
            return res.status(404).json({
                error:'404 Not Found'
            });
        }
        return res.status(200).json({
            message: `Book id ${bookId} updated successfully`
        });
    });
}

const storeBook = (req,res)=>{
    const {title,author,genre,publication_year,description,cover_image} = req.body;
    const filePath = req.file? `/imgcover/${req.file.filename}` : null;
        //percorso file caricato tramite BookController.uploadImgCover.single('cover_image')
    const bookQuery = `
        INSERT INTO books (title,author,genre,publication_year,description,cover_image)
        VALUES (?,?,?,?,?,?)
    `;
    const bookParams = [title,author,genre,publication_year,description,filePath];
    connection.query(bookQuery,bookParams,(err,bookResult)=>{
        if(err) return res.status(500).json({error:err});
        const bookId = bookResult.insertId;  //generated by mysql with AUTO INCREMENT
        return res.status(201).json({
            message: `Book created successfully`,
            data: {
                id : bookId, 
                title,author,genre,publication_year,description,
                cover_image:filePath 
            }
        });
    })
}

module.exports = {
    indexBook,
    showBook,
    destroyBook,
    updateBook,
    storeBook,
    uploadImgCover  //x Multer imgs
}